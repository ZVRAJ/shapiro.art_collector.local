{"ast":null,"code":"var _jsxFileName = \"/Users/ZVR/OneDrive/FULLSTACK/shapiro.art_collector.local/src/components/Search.js\";\nimport React, { useEffect, useState } from 'react';\nimport { fetchAllCenturies, fetchAllClassifications, fetchAllMediums, fetchQueryResults } from '../api';\n\nconst Search = ({\n  setIsLoading,\n  setSearchResults,\n  setFeaturedResult\n}) => {\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [mediumList, setMediumList] = useState([]);\n  const [searchSuggestions, setSearchSuggestions] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n  const [medium, setMedium] = useState('any');\n\n  const fetchSearchSuggestions = async () => {\n    const {\n      records\n    } = await fetchQueryResults({\n      century,\n      classification,\n      medium,\n      queryString\n    });\n    setSearchSuggestions(records);\n  };\n\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications(), fetchAllMediums()]).then(([centuries, classifications, mediums]) => {\n      setCenturyList(centuries);\n      setClassificationList(classifications);\n      setMediumList(mediums);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"search\",\n    onSubmit: async event => {\n      event.preventDefault();\n      setIsLoading(true);\n\n      try {\n        let results = await fetchQueryResults({\n          century,\n          classification,\n          medium,\n          queryString\n        });\n        setSearchResults(results);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"keywords\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }\n  }, \"Query\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"keywords\",\n    type: \"text\",\n    placeholder: \"enter keywords...\",\n    value: queryString,\n    onChange: event => {\n      setQueryString(event.target.value);\n      fetchSearchSuggestions();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"suggestion-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }\n  }, searchSuggestions.map(suggestion => /*#__PURE__*/React.createElement(\"li\", {\n    key: suggestion.objectid,\n    onClick: async () => {\n      setFeaturedResult(suggestion);\n      setSearchSuggestions([]);\n      const results = await fetchQueryResults({\n        century,\n        classification,\n        medium,\n        queryString\n      });\n      setSearchResults(results);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 42\n    }\n  }, suggestion.title)))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-classification\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }, \"Classification\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"classification-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, \"(\", classificationList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"classification\",\n    id: \"select-classification\",\n    value: classification,\n    onChange: event => setClassification(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, \"Any\"), classificationList.map((classification, index) => /*#__PURE__*/React.createElement(\"option\", {\n    value: classification.name,\n    key: `${index}:${classification.name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 6\n    }\n  }, classification.name)))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-century\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }\n  }, \"Century\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"century-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, \"(\", centuryList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"century\",\n    id: \"select-century\",\n    value: century,\n    onChange: event => setCentury(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, \"Any\"), centuryList.map((century, index) => /*#__PURE__*/React.createElement(\"option\", {\n    value: century.name,\n    key: `${index}:${century.name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 6\n    }\n  }, century.name)))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }, \"Medium \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"medium-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }\n  }, \"(\", mediumList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"medium\",\n    id: \"select-medium\",\n    value: medium,\n    onChange: event => setMedium(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, \"Any\"), mediumList.map((medium, idx) => /*#__PURE__*/React.createElement(\"option\", {\n    key: `${idx}:${medium.name}`,\n    value: medium.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 6\n    }\n  }, medium.name)))), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 3\n    }\n  }, \"SEARCH\"));\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/ZVR/OneDrive/FULLSTACK/shapiro.art_collector.local/src/components/Search.js"],"names":["React","useEffect","useState","fetchAllCenturies","fetchAllClassifications","fetchAllMediums","fetchQueryResults","Search","setIsLoading","setSearchResults","setFeaturedResult","centuryList","setCenturyList","classificationList","setClassificationList","mediumList","setMediumList","searchSuggestions","setSearchSuggestions","queryString","setQueryString","century","setCentury","classification","setClassification","medium","setMedium","fetchSearchSuggestions","records","Promise","all","then","centuries","classifications","mediums","catch","error","console","event","preventDefault","results","target","value","map","suggestion","objectid","title","length","index","name","idx"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n\tfetchAllCenturies,\n\tfetchAllClassifications,\n\tfetchAllMediums,\n\tfetchQueryResults\n} from '../api';\n\nconst Search = ({setIsLoading, setSearchResults, setFeaturedResult}) => {\n\tconst [centuryList, setCenturyList] = useState([]);\n\tconst [classificationList, setClassificationList] = useState([]);\n\tconst [mediumList, setMediumList] = useState([]);\n\tconst [searchSuggestions, setSearchSuggestions] = useState([]);\n\tconst [queryString, setQueryString] = useState('');\n\tconst [century, setCentury] = useState('any');\n\tconst [classification, setClassification] = useState('any');\n\tconst [medium, setMedium] = useState('any');\n\n\tconst fetchSearchSuggestions = async () => {\n\t\tconst {records} = await fetchQueryResults({century, classification, medium, queryString});\n\t\tsetSearchSuggestions(records);\n\t}\n\n\tuseEffect(() => {\n\t\tPromise.all([\n\t\t\tfetchAllCenturies(),\n\t\t\tfetchAllClassifications(),\n\t\t\tfetchAllMediums()\n\t\t])\n\t\t\t.then(([centuries, classifications, mediums]) => {\n\t\t\t\tsetCenturyList(centuries);\n\t\t\t\tsetClassificationList(classifications);\n\t\t\t\tsetMediumList(mediums);\n\t\t\t})\n\t\t\t.catch(error => { console.error(error) })\n\t}, []);\n\n\treturn <form id=\"search\" onSubmit={async (event) => {\n\t\tevent.preventDefault()\n\t\tsetIsLoading(true)\n\t\ttry {\n\t\t\tlet results = await fetchQueryResults({ century, classification, medium, queryString })\n\t\t\tsetSearchResults(results)\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t} finally {\n\t\t\tsetIsLoading(false)\n\t\t}\n\t}}>\n\t\t<fieldset>\n\t\t\t<label htmlFor=\"keywords\">Query</label>\n\t\t\t<input\n\t\t\t\tid=\"keywords\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"enter keywords...\"\n\t\t\t\tvalue={queryString}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tsetQueryString(event.target.value);\n\t\t\t\t\tfetchSearchSuggestions();\n\t\t\t\t}} />\n\t\t\t<ul id=\"suggestion-list\">\n\t\t\t\t{\n\t\t\t\t\tsearchSuggestions.map(suggestion => <li\n\t\t\t\t\t\tkey={suggestion.objectid}\n\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\tsetFeaturedResult(suggestion);\n\t\t\t\t\t\t\tsetSearchSuggestions([]);\n\t\t\t\t\t\t\tconst results = await fetchQueryResults({ century, classification, medium, queryString });\n\t\t\t\t\t\t\tsetSearchResults(results);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{suggestion.title}\n\t\t\t\t\t</li>)\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</fieldset>\n\t\t<fieldset>\n\t\t\t<label htmlFor=\"select-classification\">Classification\n\t\t\t\t<span className=\"classification-count\">({classificationList.length})</span>\n\t\t\t</label>\n\t\t\t<select\n\t\t\t\tname=\"classification\"\n\t\t\t\tid=\"select-classification\"\n\t\t\t\tvalue={classification}\n\t\t\t\tonChange={(event) => setClassification(event.target.value)}>\n\t\t\t\t<option value=\"any\">Any</option>\n\t\t\t\t{classificationList.map((classification, index) =>\n\t\t\t\t\t<option value={classification.name} key={`${index}:${classification.name}`}>{classification.name}</option>)\n\t\t\t\t}\n\t\t\t</select>\n\t\t</fieldset>\n\t\t<fieldset>\n\t\t\t<label htmlFor=\"select-century\">Century\n\t\t\t\t<span className=\"century-count\">({centuryList.length})</span>\n\t\t\t</label>\n\t\t\t<select\n\t\t\t\tname=\"century\"\n\t\t\t\tid=\"select-century\"\n\t\t\t\tvalue={century}\n\t\t\t\tonChange={(event) => setCentury(event.target.value)}>\n\t\t\t\t<option value=\"any\">Any</option>\n\t\t\t\t{centuryList.map((century, index) =>\n\t\t\t\t\t<option value={century.name} key={`${index}:${century.name}`}>{century.name}</option>)\n\t\t\t\t}\n\t\t\t</select>\n\t\t</fieldset>\n\t\t<fieldset>\n\t\t\t<label htmlFor=\"select-medium\">\n\t\t\t\tMedium <span className=\"medium-count\">({mediumList.length})</span>\n\t\t\t</label>\n\t\t\t<select\n\t\t\t\tname=\"medium\"\n\t\t\t\tid=\"select-medium\"\n\t\t\t\tvalue={medium}\n\t\t\t\tonChange={(event) => setMedium(event.target.value)}>\n\t\t\t\t<option value=\"any\">Any</option>\n\t\t\t\t{mediumList.map((medium, idx) =>\n\t\t\t\t\t<option key={`${idx}:${medium.name}`} value={medium.name}>\n\t\t\t\t\t\t{medium.name}\n\t\t\t\t\t</option>\n\t\t\t\t)}\n\t\t\t</select>\n\t\t</fieldset>\n\t\t<button>SEARCH</button>\n\t</form>\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}