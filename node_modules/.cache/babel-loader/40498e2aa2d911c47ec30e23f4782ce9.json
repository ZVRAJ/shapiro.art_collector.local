{"ast":null,"code":"var _jsxFileName = \"/Users/ZVR/OneDrive/FULLSTACK/shapiro.art_collector.local/src/components/Feature.js\";\nimport React, { Fragment } from 'react'; // Don't touch this import\n\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\n\nconst Searchable = props => {\n  const [searchTerm] = [props.searchTerm];\n  const [searchValue] = [props.searchValue];\n  const [setIsLoading, setSearchResults] = [props.setIsLoading, props.setSearchResults];\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: async event => {\n      event.preventDefault();\n      setIsLoading(true);\n\n      try {\n        const queryResults = await fetchQueryResultsFromTermAndValue({\n          searchTerm,\n          searchValue\n        });\n        setSearchResults(queryResults);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"SOME SEARCH TERM\"));\n};\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\n\n\nconst Feature = props => {\n  const featuredResult = props.featuredResult;\n  console.log(featuredResult);\n  return /*#__PURE__*/React.createElement(\"main\", {\n    id: \"feature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }\n  }, featuredResult ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"object-feature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }\n  }, featuredResult.title), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }\n  }, featuredResult.dated)), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"facts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }\n  }, \"Culture \", featuredResult.culture), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }\n  }, \"Medium \", featuredResult.medium)), /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }\n  }, \"Dimensions \", featuredResult.dimnesions), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }\n  }, \"Person \", [featuredResult.person]))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"photos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: featuredResult.image.map,\n    alt: [featuredResult.url],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }\n  }))) : null);\n};\n\nexport default Feature;","map":{"version":3,"sources":["/Users/ZVR/OneDrive/FULLSTACK/shapiro.art_collector.local/src/components/Feature.js"],"names":["React","Fragment","fetchQueryResultsFromTermAndValue","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","event","preventDefault","queryResults","error","console","Feature","featuredResult","log","title","dated","culture","medium","dimnesions","person","image","map","url"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n  const [searchTerm] = [props.searchTerm];\n  const [searchValue] = [props.searchValue];\n  const [setIsLoading, setSearchResults] = [props.setIsLoading, props.setSearchResults];\n\n  return <span className=\"content\">\n      <a href=\"#\" onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n              const queryResults = await fetchQueryResultsFromTermAndValue({ searchTerm, searchValue});\n              setSearchResults(queryResults);\n          } catch (error) {\n              console.error(error);\n          } finally {\n              setIsLoading(false)\n          }\n      }}>SOME SEARCH TERM</a>\n  </span>\n  }\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = (props) => {\n    const featuredResult = props.featuredResult;\n    console.log(featuredResult)\n    return <main id=\"feature\">{featuredResult ? <div className=\"object-feature\">\n         <header>\n           <h3>{featuredResult.title}</h3>\n           <h4>{featuredResult.dated}</h4>\n         </header>\n         <section className=\"facts\">\n           <React.Fragment>\n           <span className=\"title\">Culture {featuredResult.culture}</span>\n           <span className=\"content\">Medium {featuredResult.medium}</span>\n           </React.Fragment>\n           <React.Fragment>\n           <span className=\"title\">Dimensions {featuredResult.dimnesions}</span>\n           <span className=\"content\">Person {[featuredResult.person]}</span>\n           </React.Fragment>\n         </section>\n         <section className=\"photos\">\n           <img src={featuredResult.image.map} alt={[featuredResult.url]} />\n         </section>\n       </div>\n      : null }</main> \n}\n\nexport default Feature;"]},"metadata":{},"sourceType":"module"}