{"ast":null,"code":"/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=YOUR_API_KEY';\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\n\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${BASE_URL}/object?${KEY}&${term}=${encodeURI(value.split('-').join('|'))}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\n\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\n\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString\n}) {\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\n\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n    localStorage.setItem('centuries', JSON.stringify(records));\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\n\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n    localStorage.setItem('classifications', JSON.stringify(records));\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"sources":["/Users/ZVR/OneDrive/FULLSTACK/shapiro.art_collector.local/src/api/index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","response","fetch","encodeURI","split","join","data","json","error","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications"],"mappings":"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","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=YOUR_API_KEY';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}"]},"metadata":{},"sourceType":"module"}